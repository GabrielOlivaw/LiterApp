package literapp;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.Year;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SpinnerNumberModel;
import javax.swing.UIManager;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author gabag
 */
public class LibrosJFrame extends javax.swing.JFrame {
    
    private static LibrosJFrame instance;
    
    private byte[] imagenPortada;
    private ArrayList<Genero> generos;

    /**
     * Creates new form LibrosJFrame
     */
    public LibrosJFrame() {
        initComponents();
        
        
        /* Crea un nuevo modelo para el spinner selector del año de publicación, 
        indicando que el máximo seleccionable es el año actual. */
        jSpinnerPublicacion.setModel(new SpinnerNumberModel(Year.now().getValue(), 
                0, Year.now().getValue(), 1));
        
        cargarGeneros();
    }
    
    /**
     * Implementación del patrón Singleton para tener una única ventana.
     * 
     * @return La instancia única de la ventana de libros.
     */
    public static LibrosJFrame getInstance() {
        if (instance == null)
            instance = new LibrosJFrame();
        
        return instance;
    }
    
    /**
     * Obtiene los géneros literarios existentes en la base de datos y los pone 
     * en la lista desplegable.
     * 
     */
    public final void cargarGeneros() {
        generos = new ArrayList<>();
        
        Statement s;
        Connection con = ConectorMySQL.conectarBD();
   
        String consulta = "SELECT id, genero FROM generos";
        
        try {
            s = con.createStatement();
            
            ResultSet rs = s.executeQuery(consulta);
            
            while (rs.next())
                generos.add(new Genero(rs.getInt(1), rs.getString(2)));
        } catch (SQLException ex) {
            Logger.getLogger(LibrosJFrame.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                con.close();
            } catch (SQLException ex) {
                Logger.getLogger(LibrosJFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        jComboBoxGenero.removeAllItems();
        
        for (int i = 0; i < generos.size(); i++) {
            jComboBoxGenero.addItem(generos.get(i).getGenero());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelPortada = new javax.swing.JLabel();
        jLabelTitulo = new javax.swing.JLabel();
        jLabelAutor = new javax.swing.JLabel();
        jLabelPublicacion = new javax.swing.JLabel();
        jLabelGenero = new javax.swing.JLabel();
        jLabelDescripcion = new javax.swing.JLabel();
        jScrollPaneDescripcion = new javax.swing.JScrollPane();
        jTextAreaDescripcion = new javax.swing.JTextArea();
        jCheckBoxLeido = new javax.swing.JCheckBox();
        jLabelComentario = new javax.swing.JLabel();
        jScrollPaneComentario = new javax.swing.JScrollPane();
        jTextAreaComentario = new javax.swing.JTextArea();
        jTextFieldTitulo = new javax.swing.JTextField();
        jTextFieldAutor = new javax.swing.JTextField();
        jComboBoxGenero = new javax.swing.JComboBox<>();
        jButtonPortada = new javax.swing.JButton();
        jButtonAnadir = new javax.swing.JButton();
        jSpinnerPublicacion = new javax.swing.JSpinner();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Nuevo libro");
        setResizable(false);

        jLabelPortada.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabelPortada.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelPortada.setText("[Portada]");

        jLabelTitulo.setLabelFor(jTextFieldTitulo);
        jLabelTitulo.setText("Título");

        jLabelAutor.setLabelFor(jTextFieldAutor);
        jLabelAutor.setText("Autor");

        jLabelPublicacion.setText("Año publicación");

        jLabelGenero.setLabelFor(jComboBoxGenero);
        jLabelGenero.setText("Género");

        jLabelDescripcion.setLabelFor(jTextAreaDescripcion);
        jLabelDescripcion.setText("Descripción");

        jTextAreaDescripcion.setColumns(20);
        jTextAreaDescripcion.setLineWrap(true);
        jTextAreaDescripcion.setRows(5);
        jTextAreaDescripcion.setWrapStyleWord(true);
        jScrollPaneDescripcion.setViewportView(jTextAreaDescripcion);

        jCheckBoxLeido.setText("Leído");
        jCheckBoxLeido.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);

        jLabelComentario.setLabelFor(jTextAreaComentario);
        jLabelComentario.setText("Comentario");

        jTextAreaComentario.setColumns(20);
        jTextAreaComentario.setLineWrap(true);
        jTextAreaComentario.setRows(5);
        jTextAreaComentario.setWrapStyleWord(true);
        jScrollPaneComentario.setViewportView(jTextAreaComentario);

        jComboBoxGenero.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jButtonPortada.setText("Insertar imagen");
        jButtonPortada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPortadaActionPerformed(evt);
            }
        });

        jButtonAnadir.setText("Añadir libro");
        jButtonAnadir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnadirActionPerformed(evt);
            }
        });

        jSpinnerPublicacion.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabelPortada, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabelComentario)
                            .addComponent(jLabelDescripcion)
                            .addComponent(jScrollPaneDescripcion)
                            .addComponent(jCheckBoxLeido)
                            .addComponent(jScrollPaneComentario)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabelPublicacion)
                                    .addComponent(jLabelAutor)
                                    .addComponent(jLabelTitulo)
                                    .addComponent(jLabelGenero))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextFieldTitulo)
                                    .addComponent(jTextFieldAutor)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jComboBoxGenero, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jSpinnerPublicacion, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(0, 115, Short.MAX_VALUE)))))
                        .addGap(0, 1, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonPortada)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonAnadir)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelTitulo)
                            .addComponent(jTextFieldTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelAutor)
                            .addComponent(jTextFieldAutor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelPublicacion)
                            .addComponent(jSpinnerPublicacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelGenero)
                            .addComponent(jComboBoxGenero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jLabelDescripcion)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPaneDescripcion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBoxLeido)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabelComentario)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPaneComentario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabelPortada, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonPortada)
                    .addComponent(jButtonAnadir))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Implementación del botón de insertar imagen. Abre un diálogo selector de 
     * archivo, indicando que ha de ser un archivo de imagen (.jpg, .jpeg o .png)
     * Si se ha seleccionado una imagen válida, la redimensiona para que se 
     * muestre correctamente en la zona correspondiente. También la transforma 
     * en array de bytes para su posterior guardado en la base de datos.
     * 
     * @param evt 
     */
    private void jButtonPortadaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPortadaActionPerformed
        
        JFileChooser selector = new JFileChooser();
        selector.setFileFilter(new FileNameExtensionFilter(
                "Archivos de imagen (*.jpg, *.jpeg, *.png)", 
                new String[] {"jpg", "jpeg", "png"}));
        
        int result = selector.showOpenDialog(this);
        
        if (result == JFileChooser.APPROVE_OPTION) {
            if (esImagen(selector.getSelectedFile().getName())) {
            
                try {

                    // Obtiene la imagen seleccionada.
                    BufferedImage bimg = ImageIO.read(selector.getSelectedFile());
                    
                    // Redimensiona la imagen para mostrarla en la ventana.
                    Image img = bimg.getScaledInstance(jLabelPortada.getWidth(), 
                            jLabelPortada.getHeight(), Image.SCALE_SMOOTH);
                    jLabelPortada.setIcon(new ImageIcon(img));

                    /* Transforma la imagen sin redimensionar en array de bytes 
                    para su posterior guardado en una base de datos.*/
                    ByteArrayOutputStream baos = new ByteArrayOutputStream();
                    ImageIO.write(bimg, "jpg", baos);
                    baos.flush();
                    imagenPortada = baos.toByteArray();
                    baos.close();

                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(this, "Ha ocurrido algún error "
                            + "intentando leer la imagen seleccionada.", "Error", 
                            JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "No se ha seleccionado una "
                        + "imagen válida (.jpg, .jpeg, .png)", "Aviso", 
                        JOptionPane.WARNING_MESSAGE);
            }
        }
    }//GEN-LAST:event_jButtonPortadaActionPerformed

    /**
     * Este método recibe una ruta de archivo y evalúa si es un archivo de 
     * imagen con extensión .jpg, .jpeg o .png
     * La extensión la obtiene dividiendo la ruta en un array utilizando el 
     * caracter . como divisor y la extensión debería ser el último elemento 
     * de dicho array.
     * 
     * @param ruta Ruta del archivo seleccionado
     * @return true si la extensión del archivo es .jpg, .jpeg o .png
     */
    private boolean esImagen(String ruta) {
        String extension = ruta.split("\\.")[ruta.split("\\.").length-1];
        return extension.equals("jpg") || extension.equals("jpeg") || extension.equals("png");
    }
    
    /**
     * Añade un nuevo libro a la base de datos con la información introducida.
     * 
     * @param evt 
     */
    private void jButtonAnadirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnadirActionPerformed
        // TODO add your handling code here:
        
        PreparedStatement ps;
        
        Connection con = ConectorMySQL.conectarBD();
        
        String insertar = "INSERT INTO libros (titulo, autor, publicacion, "
                + "genero, leido, descripcion, comentario, portada) "
                + "VALUES (?, ?, ?, ?, ?, ?, ?, ?)";
        
        try {
            ps = con.prepareStatement(insertar);
            
            ps.setString(1, jTextFieldTitulo.getText());
            ps.setString(2, jTextFieldAutor.getText());
            ps.setInt(3, (int)jSpinnerPublicacion.getValue());
            ps.setInt(4, generos.get(jComboBoxGenero.getSelectedIndex()).getId());
            ps.setBoolean(5, jCheckBoxLeido.isSelected());
            ps.setString(6, jTextAreaDescripcion.getText());
            ps.setString(7, jTextAreaComentario.getText());
            ps.setBinaryStream(8, new ByteArrayInputStream(imagenPortada), imagenPortada.length);
            
            ps.executeUpdate();
        } catch (SQLException ex) {
            Logger.getLogger(LibrosJFrame.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                con.close();
            } catch (SQLException ex) {
                Logger.getLogger(LibrosJFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButtonAnadirActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Look and feel */
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException | InstantiationException | 
                IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LibrosJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new LibrosJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAnadir;
    private javax.swing.JButton jButtonPortada;
    private javax.swing.JCheckBox jCheckBoxLeido;
    private javax.swing.JComboBox<String> jComboBoxGenero;
    private javax.swing.JLabel jLabelAutor;
    private javax.swing.JLabel jLabelComentario;
    private javax.swing.JLabel jLabelDescripcion;
    private javax.swing.JLabel jLabelGenero;
    private javax.swing.JLabel jLabelPortada;
    private javax.swing.JLabel jLabelPublicacion;
    private javax.swing.JLabel jLabelTitulo;
    private javax.swing.JScrollPane jScrollPaneComentario;
    private javax.swing.JScrollPane jScrollPaneDescripcion;
    private javax.swing.JSpinner jSpinnerPublicacion;
    private javax.swing.JTextArea jTextAreaComentario;
    private javax.swing.JTextArea jTextAreaDescripcion;
    private javax.swing.JTextField jTextFieldAutor;
    private javax.swing.JTextField jTextFieldTitulo;
    // End of variables declaration//GEN-END:variables
}
